/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


// May contain unused imports in some cases
// @ts-ignore
import type { TinkarConceptModel } from './tinkar-concept-model';

/**
 * This class represents a mathematical formula for performing calculations. Only one of leftOperand, leftOperandValue, or leftOperandFormula should be set. Only one of rightOperand, rightOperandValue, or rightOperandFormula should be set. Operation is required.
 * @export
 * @interface Formula
 */
export interface Formula {
    /**
     * The name of the formula, this will be used as the CSC Header.
     * @type {string}
     * @memberof Formula
     */
    'name'?: string;
    /**
     * 
     * @type {TinkarConceptModel}
     * @memberof Formula
     */
    'leftOperand'?: TinkarConceptModel;
    /**
     * 
     * @type {TinkarConceptModel}
     * @memberof Formula
     */
    'rightOperand'?: TinkarConceptModel;
    /**
     * The value of the left operand in the formula. Only one of leftOperand, leftOperandValue, or leftOperandFormula should be set.
     * @type {number}
     * @memberof Formula
     */
    'leftOperandValue'?: number;
    /**
     * The value of the right operand in the formula. Only one of rightOperand, rightOperandValue, or rightOperandFormula should be set.
     * @type {number}
     * @memberof Formula
     */
    'rightOperandValue'?: number;
    /**
     * 
     * @type {Formula}
     * @memberof Formula
     */
    'leftOperandFormula'?: Formula;
    /**
     * 
     * @type {Formula}
     * @memberof Formula
     */
    'rightOperandFormula'?: Formula;
    /**
     * 
     * @type {TinkarConceptModel}
     * @memberof Formula
     */
    'leftOperandUnit'?: TinkarConceptModel;
    /**
     * 
     * @type {TinkarConceptModel}
     * @memberof Formula
     */
    'rightOperandUnit'?: TinkarConceptModel;
    /**
     * Numerical operations that can be performed on numerical values.
     * @type {string}
     * @memberof Formula
     */
    'operation'?: Operation;
}

export const Operation = {
    Multiply: 'MULTIPLY',
    Divide: 'DIVIDE',
    Add: 'ADD',
    Subtract: 'SUBTRACT',
    Modulo: 'MODULO',
    Power: 'POWER'
} as const;

export type Operation = typeof Operation[keyof typeof Operation];


