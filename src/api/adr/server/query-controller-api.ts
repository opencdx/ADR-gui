/* tslint:disable */
/* eslint-disable */
/**
 * OpenAPI definition
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: v0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from '../configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from '../common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, type RequestArgs, BaseAPI, RequiredError, operationServerMap } from '../base';
// @ts-ignore
import type { ADRQuery } from '../model';
// @ts-ignore
import type { SavedQuery } from '../model';
// @ts-ignore
import type { TinkarConceptModel } from '../model';
/**
 * QueryControllerApi - axios parameter creator
 * @export
 */
export const QueryControllerApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuery: async (id: number, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('deleteQuery', 'id', id)
            const localVarPath = `/query/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryableData: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnits: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query/units`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueries: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/query/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ADRQuery} aDRQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuery: async (aDRQuery: ADRQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aDRQuery' is not null or undefined
            assertParamExists('postQuery', 'aDRQuery', aDRQuery)
            const localVarPath = `/query`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aDRQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {ADRQuery} aDRQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCSV: async (aDRQuery: ADRQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'aDRQuery' is not null or undefined
            assertParamExists('queryCSV', 'aDRQuery', aDRQuery)
            const localVarPath = `/query/csv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(aDRQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SavedQuery} savedQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveQuery: async (savedQuery: SavedQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'savedQuery' is not null or undefined
            assertParamExists('saveQuery', 'savedQuery', savedQuery)
            const localVarPath = `/query/save`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(savedQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search: async (search: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'search' is not null or undefined
            assertParamExists('search', 'search', search)
            const localVarPath = `/query/search`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (search !== undefined) {
                localVarQueryParameter['search'] = search;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {SavedQuery} savedQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuery: async (savedQuery: SavedQuery, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'savedQuery' is not null or undefined
            assertParamExists('updateQuery', 'savedQuery', savedQuery)
            const localVarPath = `/query/update`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(savedQuery, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryControllerApi - functional programming interface
 * @export
 */
export const QueryControllerApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryControllerApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {number} id 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteQuery(id: number, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteQuery(id, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.deleteQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getQueryableData(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TinkarConceptModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getQueryableData(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.getQueryableData']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getUnits(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TinkarConceptModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getUnits(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.getUnits']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listQueries(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<SavedQuery>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listQueries(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.listQueries']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ADRQuery} aDRQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async postQuery(aDRQuery: ADRQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<string>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.postQuery(aDRQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.postQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {ADRQuery} aDRQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async queryCSV(aDRQuery: ADRQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<string>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.queryCSV(aDRQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.queryCSV']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SavedQuery} savedQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async saveQuery(savedQuery: SavedQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedQuery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.saveQuery(savedQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.saveQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {string} search 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async search(search: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<TinkarConceptModel>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.search(search, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.search']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {SavedQuery} savedQuery 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async updateQuery(savedQuery: SavedQuery, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<SavedQuery>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.updateQuery(savedQuery, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['QueryControllerApi.updateQuery']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * QueryControllerApi - factory interface
 * @export
 */
export const QueryControllerApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryControllerApiFp(configuration)
    return {
        /**
         * 
         * @param {QueryControllerApiDeleteQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteQuery(requestParameters: QueryControllerApiDeleteQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.deleteQuery(requestParameters.id, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getQueryableData(options?: RawAxiosRequestConfig): AxiosPromise<Array<TinkarConceptModel>> {
            return localVarFp.getQueryableData(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getUnits(options?: RawAxiosRequestConfig): AxiosPromise<Array<TinkarConceptModel>> {
            return localVarFp.getUnits(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listQueries(options?: RawAxiosRequestConfig): AxiosPromise<Array<SavedQuery>> {
            return localVarFp.listQueries(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryControllerApiPostQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        postQuery(requestParameters: QueryControllerApiPostQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<string>> {
            return localVarFp.postQuery(requestParameters.aDRQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryControllerApiQueryCSVRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        queryCSV(requestParameters: QueryControllerApiQueryCSVRequest, options?: RawAxiosRequestConfig): AxiosPromise<string> {
            return localVarFp.queryCSV(requestParameters.aDRQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryControllerApiSaveQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        saveQuery(requestParameters: QueryControllerApiSaveQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<SavedQuery> {
            return localVarFp.saveQuery(requestParameters.savedQuery, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryControllerApiSearchRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        search(requestParameters: QueryControllerApiSearchRequest, options?: RawAxiosRequestConfig): AxiosPromise<Array<TinkarConceptModel>> {
            return localVarFp.search(requestParameters.search, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {QueryControllerApiUpdateQueryRequest} requestParameters Request parameters.
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        updateQuery(requestParameters: QueryControllerApiUpdateQueryRequest, options?: RawAxiosRequestConfig): AxiosPromise<SavedQuery> {
            return localVarFp.updateQuery(requestParameters.savedQuery, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * Request parameters for deleteQuery operation in QueryControllerApi.
 * @export
 * @interface QueryControllerApiDeleteQueryRequest
 */
export interface QueryControllerApiDeleteQueryRequest {
    /**
     * 
     * @type {number}
     * @memberof QueryControllerApiDeleteQuery
     */
    readonly id: number
}

/**
 * Request parameters for postQuery operation in QueryControllerApi.
 * @export
 * @interface QueryControllerApiPostQueryRequest
 */
export interface QueryControllerApiPostQueryRequest {
    /**
     * 
     * @type {ADRQuery}
     * @memberof QueryControllerApiPostQuery
     */
    readonly aDRQuery: ADRQuery
}

/**
 * Request parameters for queryCSV operation in QueryControllerApi.
 * @export
 * @interface QueryControllerApiQueryCSVRequest
 */
export interface QueryControllerApiQueryCSVRequest {
    /**
     * 
     * @type {ADRQuery}
     * @memberof QueryControllerApiQueryCSV
     */
    readonly aDRQuery: ADRQuery
}

/**
 * Request parameters for saveQuery operation in QueryControllerApi.
 * @export
 * @interface QueryControllerApiSaveQueryRequest
 */
export interface QueryControllerApiSaveQueryRequest {
    /**
     * 
     * @type {SavedQuery}
     * @memberof QueryControllerApiSaveQuery
     */
    readonly savedQuery: SavedQuery
}

/**
 * Request parameters for search operation in QueryControllerApi.
 * @export
 * @interface QueryControllerApiSearchRequest
 */
export interface QueryControllerApiSearchRequest {
    /**
     * 
     * @type {string}
     * @memberof QueryControllerApiSearch
     */
    readonly search: string
}

/**
 * Request parameters for updateQuery operation in QueryControllerApi.
 * @export
 * @interface QueryControllerApiUpdateQueryRequest
 */
export interface QueryControllerApiUpdateQueryRequest {
    /**
     * 
     * @type {SavedQuery}
     * @memberof QueryControllerApiUpdateQuery
     */
    readonly savedQuery: SavedQuery
}

/**
 * QueryControllerApi - object-oriented interface
 * @export
 * @class QueryControllerApi
 * @extends {BaseAPI}
 */
export class QueryControllerApi extends BaseAPI {
    /**
     * 
     * @param {QueryControllerApiDeleteQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public deleteQuery(requestParameters: QueryControllerApiDeleteQueryRequest, options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).deleteQuery(requestParameters.id, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public getQueryableData(options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).getQueryableData(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public getUnits(options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).getUnits(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public listQueries(options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).listQueries(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryControllerApiPostQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public postQuery(requestParameters: QueryControllerApiPostQueryRequest, options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).postQuery(requestParameters.aDRQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryControllerApiQueryCSVRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public queryCSV(requestParameters: QueryControllerApiQueryCSVRequest, options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).queryCSV(requestParameters.aDRQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryControllerApiSaveQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public saveQuery(requestParameters: QueryControllerApiSaveQueryRequest, options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).saveQuery(requestParameters.savedQuery, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryControllerApiSearchRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public search(requestParameters: QueryControllerApiSearchRequest, options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).search(requestParameters.search, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {QueryControllerApiUpdateQueryRequest} requestParameters Request parameters.
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryControllerApi
     */
    public updateQuery(requestParameters: QueryControllerApiUpdateQueryRequest, options?: RawAxiosRequestConfig) {
        return QueryControllerApiFp(this.configuration).updateQuery(requestParameters.savedQuery, options).then((request) => request(this.axios, this.basePath));
    }
}

